{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 /**\
 * Definition for binary tree\
 * class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
	public int isSameTree(TreeNode a, TreeNode b) \{\
	    \
	    Stack<TreeNode> stackA = new Stack<TreeNode>();\
	    Stack<TreeNode> stackB = new Stack<TreeNode>();\
	    \
	    while(a != null && b!= null)\{\
	        if(a.val != b.val)\{\
	            return 0;\
	        \}\
	        stackA.push(a);\
	        stackB.push(b);\
	        a = a.left;\
	        b = b.left;\
	    \}\
	    if(a!=null ^ b!=null)\{\
	        return 0;\
	    \}\
	    \
	    while(!stackA.empty())\{\
	        TreeNode x = stackA.pop();\
	        TreeNode y = stackB.pop();\
	        if(x.right != null ^ y.right != null)\{\
	            return 0;\
	        \}\
	        if(x.right != null && y.right != null)\{\
	            TreeNode m = x.right;\
	            TreeNode n = y.right;\
	            if(m.val != n.val)\{\
	                return 0;\
	            \}\
	           while(m != null && n!= null)\{\
        	        if(m.val != n.val)\{\
        	            return 0;\
        	        \}\
        	        stackA.push(m);\
        	        stackB.push(n);\
        	        m = m.left;\
        	        n = n.left;\
	            \}\
	            if(m!=null ^ n!=null)\{\
	                return 0;\
	           \}\
	            \
	        \}\
	    \}\
	    return 1;\
	    \
	\}\
\}\
}